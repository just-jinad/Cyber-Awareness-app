generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model module {
  id           Int            @id @default(autoincrement())
  title        String
  content      String         
  createdAt    DateTime       @default(now())
  imageUrl     String?
  userprogress userprogress[]
  quizzes      Quiz[]         // Added opposite relation for Quiz
}

model Quiz {
  id        Int        @id @default(autoincrement())
  title     String
  type      String     // "public", "module-linked", "pin-protected"
  pin       String?    // Optional pin for pin-protected quizzes
  moduleId  Int?       // For module-linked quizzes
  module    module?    @relation(fields: [moduleId], references: [id])
  questions Question[]
  results   QuizResult[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Question {
  id        Int      @id @default(autoincrement())
  quizId    Int
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  type      String   // "multiple-choice", "true-false", "scenario-based"
  text      String
  options   Json     // Changed from String[] to Json for MySQL compatibility
  correct   String   // Correct answer (text of the correct option or "true"/"false")
  score     Int      // Points for correct answer
  feedback  String?  // Explanation for the correct answer
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuizResult {
  id        Int      @id @default(autoincrement())
  userId    Int?
  user      user?    @relation(fields: [userId], references: [id])
  quizId    Int
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  score     Int
  answers   Json     // Store user answers as { questionId: answer }
  createdAt DateTime @default(now())
}

model Simulation {
  id            Int      @id @default(autoincrement())
  title         String
  steps         Json?    // e.g., [{ scenario: "Email from hr-support@company-careers.com", options: ["Click link", "Report"], nextStep: [1, null] }, { scenario: "Fake login page", options: ["Enter credentials", "Close"], outcome: "breach" }]
  createdAt     DateTime @default(now())
}

model user {
  id           Int            @id @default(autoincrement())
  username     String         @unique(map: "User_username_key")
  email        String         @unique(map: "User_email_key")
  password     String
  role         user_role      @default(USER)
  level        String         @default("beginner") // Global status: beginner, intermediate, advanced
  createdAt    DateTime       @default(now())     // For tracking sign-ups
  userprogress userprogress[]
  quizResults  QuizResult[]   // Added opposite relation for QuizResult
}

model userprogress {
  id          Int      @id @default(autoincrement())
  userId      Int
  moduleId    Int
  score       Int
  completedAt DateTime @default(now())
  level       String   @default("beginner") // Module-specific level
  status      String?  // e.g., "in-progress", "completed"

  module module @relation(fields: [moduleId], references: [id])
  user   user   @relation(fields: [userId], references: [id])

  @@index([moduleId])
  @@index([userId])
}

enum user_role {
  USER
  ADMIN
}