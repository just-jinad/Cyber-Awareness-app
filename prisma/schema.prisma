generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Module {
  id           Int            @id @default(autoincrement())
  title        String
  content      String         
  createdAt    DateTime       @default(now())
  imageUrl     String?
  userprogress UserProgress[]
  quizzes      Quiz[]
}

model Quiz {
  id        Int        @id @default(autoincrement())
  title     String
  type      String     // "public", "module-linked", "pin-protected"
  pin       String?
  moduleId  Int?
  module    Module?    @relation(fields: [moduleId], references: [id])
  questions Question[]
  results   QuizResult[]
  progress  UserProgress[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Question {
  id        Int      @id @default(autoincrement())
  quizId    Int
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  type      String
  text      String
  options   Json
  correct   String
  score     Int
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuizResult {
  id        Int      @id @default(autoincrement())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  quizId    Int
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  score     Int
  answers   Json
  createdAt DateTime @default(now())
}

model Simulation {
  id           Int            @id @default(autoincrement())
  title        String
  steps        Json?
  createdAt    DateTime       @default(now())
  userprogress UserProgress[]
}

model User {
  id                Int            @id @default(autoincrement())
  username          String         @unique(map: "User_username_key")
  email             String         @unique(map: "User_email_key")
  password          String
  role              UserRole       @default(USER)
  level             String         @default("beginner")
  createdAt         DateTime       @default(now())
  userprogress      UserProgress[]
  quizResults       QuizResult[]

  // ✅ Explicitly named relations
  assignments        Assignment[] @relation("UserAssignments")
  assignedByUsers    Assignment[] @relation("AdminAssignments")
}

model UserProgress {
  id           Int       @id @default(autoincrement())
  userId       Int
  moduleId     Int?
  simulationId Int?
  quizId       Int?
  score        Int
  completedAt  DateTime  @default(now())
  level        String    @default("beginner")
  status       String?
  timeTaken    Float     @default(0)

  module       Module?     @relation(fields: [moduleId], references: [id])
  simulation   Simulation? @relation(fields: [simulationId], references: [id])
  quiz         Quiz?       @relation(fields: [quizId], references: [id])
  user         User        @relation(fields: [userId], references: [id])

  @@index([moduleId])
  @@index([simulationId])
  @@index([quizId])
  @@index([userId])
}

model Assignment {
  id          Int      @id @default(autoincrement())
  userId      Int
  contentId   Int
  contentType String
  assignedBy  Int
  assignedAt  DateTime @default(now())
  status      String   @default("pending")

  // ✅ Match relation names here
  user        User     @relation("UserAssignments", fields: [userId], references: [id])
  admin       User     @relation("AdminAssignments", fields: [assignedBy], references: [id])

  @@index([userId])
  @@index([contentId])
  @@unique([userId, contentId, contentType])
}

enum UserRole {
  USER
  ADMIN
}
